{"version":3,"sources":["/Users/borakasmer/Projects/Devnot2020/devnotNews/node_modules/ngx-socket-io/fesm2015/ngx-socket-io.js"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4EE;;;;0BAGiB","file":"ngx-socket-io.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { InjectionToken, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport * as io from 'socket.io-client';\nimport io__default, {  } from 'socket.io-client';\n\nclass WrappedSocket {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this.subscribersCounter = 0;\r\n        this.emptyConfig = {\r\n            url: '',\r\n            options: {}\r\n        };\r\n        if (config === undefined)\r\n            config = this.emptyConfig;\r\n        const url = config.url;\r\n        const options = config.options;\r\n        var ioFunc = io__default ? io__default : io;\r\n        this.ioSocket = ioFunc(url, options);\r\n    }\r\n    of(namespace) {\r\n        this.ioSocket.of(namespace);\r\n    }\r\n    on(eventName, callback) {\r\n        this.ioSocket.on(eventName, callback);\r\n    }\r\n    once(eventName, callback) {\r\n        this.ioSocket.once(eventName, callback);\r\n    }\r\n    connect() {\r\n        return this.ioSocket.connect();\r\n    }\r\n    disconnect(close) {\r\n        return this.ioSocket.disconnect.apply(this.ioSocket, arguments);\r\n    }\r\n    emit(eventName, data, callback) {\r\n        return this.ioSocket.emit.apply(this.ioSocket, arguments);\r\n    }\r\n    removeListener(eventName, callback) {\r\n        return this.ioSocket.removeListener.apply(this.ioSocket, arguments);\r\n    }\r\n    removeAllListeners(eventName) {\r\n        return this.ioSocket.removeAllListeners.apply(this.ioSocket, arguments);\r\n    }\r\n    fromEvent(eventName) {\r\n        this.subscribersCounter++;\r\n        return Observable.create((observer) => {\r\n            this.ioSocket.on(eventName, (data) => {\r\n                observer.next(data);\r\n            });\r\n            return () => {\r\n                if (this.subscribersCounter === 1)\r\n                    this.ioSocket.removeListener(eventName);\r\n            };\r\n        }).pipe(share());\r\n    }\r\n    fromOneTimeEvent(eventName) {\r\n        return new Promise(resolve => this.once(eventName, resolve));\r\n    }\r\n}\n\nvar SocketIoModule_1;\r\n/** Socket factory */\r\nfunction SocketFactory(config) {\r\n    return new WrappedSocket(config);\r\n}\r\nconst SOCKET_CONFIG_TOKEN = new InjectionToken('__SOCKET_IO_CONFIG__');\r\nlet SocketIoModule = SocketIoModule_1 = class SocketIoModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: SocketIoModule_1,\r\n            providers: [\r\n                { provide: SOCKET_CONFIG_TOKEN, useValue: config },\r\n                {\r\n                    provide: WrappedSocket,\r\n                    useFactory: SocketFactory,\r\n                    deps: [SOCKET_CONFIG_TOKEN]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n};\r\nSocketIoModule = SocketIoModule_1 = __decorate([\r\n    NgModule({})\r\n], SocketIoModule);\n\nexport { WrappedSocket as Socket, SocketIoModule, SocketFactory as ɵa, SOCKET_CONFIG_TOKEN as ɵb };\n"]}